@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    // @each $color, $value in $theme-colors {
    //   .text#{$infix}-#{$color} {
    //     color: theme-color($color) !important;
    //   }
    //   .bg#{$infix}-#{$color} {
    //     background-color: theme-color($color) !important;
    //   }
    // }

    @each $mycolor in $mycolors {
      .fill#{$infix}-#{nth($mycolor, 1)} {
        fill: #{nth($mycolor, 2)} !important;
      }
      .text#{$infix}-#{nth($mycolor, 1)} {
        color: #{nth($mycolor, 2)} !important;
      }
      .bg#{$infix}-#{nth($mycolor, 1)} {
        background-color: #{nth($mycolor, 2)} !important;
      }
    }

    @for $size from 0 through 300 {
      .square#{$infix}-#{$size} { width: #{$size}px !important; height: #{$size}px !important; }
    }
  }
}

/*-----------------
  MIXINS / FUNCTIONS:
  -> rem
  -> font-size
  -> font
-----------------*/

// ----------------------- //
// ------ FUNCTIONS ------ //
// ----------------------- //

$baseline: 10;

// Function to convert a px value to rem
// @params{$size} - The pixel value to be converted to rem
// @usage - font-size: rem(20px) - To convert 20 px to 2rem (baseline is 10 px)
// @usage - font-size: rem(20px, 20px) - to convert 20px to 1rem (baseline is 20px)
@function rem($size) {
  @if $size == 0 {
    @return 0;
  }

  @if type-of($size) == list {
    $result: ();

    @each $e in $size {
      $result: append($result, rem($e, $baseline + px));
    }

    @return $result;
  } @else {
    @return if(type-of($size) == number and unit($size) == px, $size / ($baseline + px) * 1rem, $size);
  }
 }


// -------------------- //
// ------ MIXINS ------ //
// -------------------- //

// Mixin to convert a font-size from px to rem
// @params {$fontsize} - Default to 16px, the value of the fontsize in px we want to convert to rem
// @params {$linesize} - Default to 22px, the value of the lineheight in px we want to convert to rem
@function tracking( $target ){
  @return ($target / 1000) * 1em;
}
@mixin tracking( $target ){
  letter-spacing: tracking( $target );
}
@mixin font-size($fontsize: 14, $linesize: 22, $letterspacing: initial) {
  font-size: $fontsize + px;
  font-size: ($fontsize / $baseline) + rem;
  line-height: $linesize + px;
  line-height: ($linesize / $baseline) + rem;
  @if $letterspacing != "initial" {
    letter-spacing: tracking( $letterspacing );
  }
}

@mixin font-size-important($fontsize: 14, $linesize: 22, $letterspacing: initial) {
    font-size: $fontsize + px !important;
    font-size: ($fontsize / $baseline) + rem !important;
    line-height: $linesize + px !important;
    line-height: ($linesize / $baseline) + rem !important;
  @if $letterspacing != "initial" {
    letter-spacing: tracking( $letterspacing );
  }
}

// Mixin font to apply a default style to the font
// @params {$font} - The font required and the fallbacks as Arial and sans-serif
// @params {$style} - The font-style to be applied to the font selected - default to normal
// @params {$weight} - The font-weight to be applied to the font selected - Default to normal
// @usage - @include font($default-font-family, italic, bold) - To include the Default font, with a font-style italic and a font-weight bold
@mixin font($font, $style: normal, $weight: normal) {
  font-family: $font, Arial, sans-serif;
  font-style: $style;
  font-weight: $weight;
}

// Mixin to add a background that'll take the entire device width regarding of the layout
// @params {$background} - The background value
@mixin full-width-background($background){
  position: relative;

  &:before {
    content: '';
    position: absolute;
    width: 100vw;
    height: 100%;
    top: 0;
    left: 50%;
    margin-left: -50vw;
    background: $background;
    z-index: -1;
  }
}

// Custom Mixins
@mixin transition($transition...) {
  -moz-transition:    $transition;
  -o-transition:      $transition;
  -webkit-transition: $transition;
  transition:         $transition;
}
@mixin transition-property($property) {
  -moz-transition-property:    $property;
  -o-transition-property:      $property;
  -webkit-transition-property: $property;
  transition-property:         $property;
}
@mixin transition-duration($duration) {
  -moz-transition-property:    $duration;
  -o-transition-property:      $duration;
  -webkit-transition-property: $duration;
  transition-property:         $duration;
}
@mixin transition-timing-function($timing) {
  -moz-transition-timing-function:    $timing;
  -o-transition-timing-function:      $timing;
  -webkit-transition-timing-function: $timing;
  transition-timing-function:         $timing;
}
@mixin transition-delay($delay) {
  -moz-transition-delay:    $delay;
  -o-transition-delay:      $delay;
  -webkit-transition-delay: $delay;
  transition-delay:         $delay;
}
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}
// generic transform
@mixin transform($transforms) {
     -moz-transform: $transforms;
       -o-transform: $transforms;
      -ms-transform: $transforms;
  -webkit-transform: $transforms;
          transform: $transforms;
}
// rotate
@mixin rotate($deg) {
  -moz-transform: rotate($deg);
  -o-transform: rotate($deg);
  -ms-transform: rotate($deg);
  -webkit-transform: rotate($deg);
  transform: rotate($deg);
}

// scale
@mixin scale($scale) {
  @include transform(scale($scale));
}
// translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}
// skew
@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
       -o-transform-origin: $origin;
      -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
          transform-origin: $origin;
}
//background cover
@mixin background-cover() {
  background-repeat: no-repeat;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
}
//box shadow
@mixin box-shadow($params) {
  -webkit-box-shadow: $params;
     -moz-box-shadow: $params;
          box-shadow: $params;
}

@mixin media-breakpoint-mobile-landscape{
  @media screen and (min-width:320px) and (max-width:800px) and (orientation:landscape) {
    @content;
  }
}

@mixin media-breakpoint-mobile-portrait{
  @media screen and (min-width:320px) and (max-width:768px) and (orientation:portrait) {
    @content;
  }
}

@mixin horizontal-align($position: relative) {
  position: $position;
  left: 50%;
  margin-right: -50%;
  -webkit-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
}

@mixin both-align() {
	position: absolute;
	left: 50%;
	top: 50%;
	margin-right: -50%;
	-webkit-transform: translate(-50%,-50%);
	-ms-transform: translate(-50%,-50%);
	transform: translate(-50%,-50%);
}

@mixin placeholder($color){
  &::-webkit-input-placeholder {
    color: $color !important;
  }
  &:-moz-placeholder {
    color: $color !important;
  }
  &::-moz-placeholder {
    color: $color !important;
  }
  &:-ms-input-placeholder {
    color: $color !important;
  }
  &::-ms-input-placeholder {
    color: $color !important;
  }
}

@mixin scrollbar($background, $bar-color){
  &::-webkit-scrollbar-track{
    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
    background-color: $bar-color;
    border-radius: 3px;
  }
  &::-webkit-scrollbar{
    width: 3px;
    border-radius: 3px;
    // background-color: $background;
  }
  &::-webkit-scrollbar-thumb{
    background-color: $background;
    border-radius: 3px;
  }
}

//placeholder
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-ms-input-placeholder {
    @content;
  }
}
